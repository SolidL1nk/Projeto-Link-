import asyncio  # Adicione esta linha
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # Suprime avisos e mensagens de informaÃ§Ã£o
import logging
import requests
import pandas as pd
import numpy as np
import discord
from datetime import datetime
from typing import Dict, List, Optional
from binance.client import Client
from transformers import pipeline
from tf_keras.models import Sequential, load_model
from tf_keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler
from googletrans import Translator  # Adicione esta importaÃ§Ã£o

# ConfiguraÃ§Ã£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

# Carrega variÃ¡veis de ambiente
BINANCE_API_KEY = os.getenv("KEY_BINANCE")
BINANCE_SECRET_KEY = os.getenv("SECRET_BINANCE")
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
DISCORD_CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID", "0"))

# ConfiguraÃ§Ãµes da IA
CONFIG = {
    "moedas": ["BTCUSDT", "SOLUSDT"],
    "intervalo_previsao": "1h",
    "modelo_path": "modelo_lstm.h5",
    "coingecko_api": "https://api.coingecko.com/api/v3",
    "cryptopanic_api": "https://cryptopanic.com/api/v1/posts/"
}

class IA_Assistente:
    def __init__(self):
        self.client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)
        # SubstituÃ­ o modelo por um pÃºblico disponÃ­vel
        self.analisador_sentimento = pipeline('sentiment-analysis', model='nlptown/bert-base-multilingual-uncased-sentiment')
        self.scaler = MinMaxScaler(feature_range=(0, 1))
        self.modelo = self.carregar_modelo()

    def carregar_modelo(self):
        """Carrega o modelo LSTM prÃ©-treinado ou treina um novo."""
        if os.path.exists(CONFIG["modelo_path"]):
            return load_model(CONFIG["modelo_path"])
        else:
            return self.treinar_modelo()

    def coletar_dados_binance(self, symbol: str, limite: int = 100) -> pd.DataFrame:
        """Coleta dados histÃ³ricos da Binance."""
        candles = self.client.get_historical_klines(
            symbol=symbol,
            interval=CONFIG["intervalo_previsao"],
            limit=limite
        )
        df = pd.DataFrame(candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time', 'quote_asset_volume', 'trades', 'taker_buy_base', 'taker_buy_quote', 'ignore'])
        df['close'] = df['close'].astype(float)
        return df[['timestamp', 'close']]

    def preprocessar_dados(self, df: pd.DataFrame) -> np.ndarray:
        """Prepara os dados para o modelo LSTM."""
        dados = self.scaler.fit_transform(df['close'].values.reshape(-1, 1))
        sequencias, alvos = [], []
        for i in range(60, len(dados)):
            sequencias.append(dados[i-60:i, 0])
            alvos.append(dados[i, 0])
        return np.array(sequencias), np.array(alvos)

    def treinar_modelo(self) -> Sequential:
        """Treina um modelo LSTM para previsÃ£o de preÃ§os."""
        df = self.coletar_dados_binance("BTCUSDT", 1000)
        X, y = self.preprocessar_dados(df)
        modelo = Sequential([
            LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)),
            LSTM(50),
            Dense(1)
        ])
        modelo.compile(optimizer='adam', loss='mean_squared_error')
        modelo.fit(X, y.reshape(-1, 1), epochs=20, batch_size=32)
        modelo.save(CONFIG["modelo_path"])
        return modelo

    def prever_tendencia(self, symbol: str) -> float:
        """Faz uma previsÃ£o para a prÃ³xima hora."""
        df = self.coletar_dados_binance(symbol)
        X, _ = self.preprocessar_dados(df)
        previsao = self.modelo.predict(X[-1].reshape(1, -1, 1))
        return self.scaler.inverse_transform(previsao)[0][0]

    def analisar_noticias(self) -> List[Dict]:
        """Analisa notÃ­cias do CryptoPanic com NLP e traduz para portuguÃªs."""
        response = requests.get(f"{CONFIG['cryptopanic_api']}?auth_token={os.getenv('CRYPTOPANIC_API_KEY')}")
        noticias = []
        translator = Translator()  # Inicializa o tradutor
        for item in response.json().get('results', [])[:5]:
            sentimento = self.analisador_sentimento(item['title'])[0]
            titulo_traduzido = translator.translate(item['title'], src='en', dest='pt').text  # TraduÃ§Ã£o
            noticias.append({
                "titulo": titulo_traduzido,
                "sentimento": sentimento['label'],
                "score": sentimento['score']
            })
        return noticias

    def detectar_memecoins(self) -> List[Dict]:
        """Identifica memecoins com alta de +50% em 24h."""
        response = requests.get(f"{CONFIG['coingecko_api']}/coins/markets?vs_currency=usd&order=volume_desc")
        memecoins = []
        for coin in response.json():
            if 'meme' in coin['name'].lower() and coin['price_change_percentage_24h'] > 50:
                memecoins.append({
                    "nome": coin['name'],
                    "symbol": coin['symbol'],
                    "alta_24h": coin['price_change_percentage_24h']
                })
        return memecoins

    async def enviar_alerta_discord(self, mensagem: str):
        """Envia mensagens para o Discord."""
        client = discord.Client(intents=discord.Intents.default())
        await client.login(DISCORD_TOKEN)
        canal = await client.fetch_channel(DISCORD_CHANNEL_ID)
        await canal.send(mensagem)
        await client.close()

    def gerar_relatorio(self) -> str:
        """Gera um relatÃ³rio completo de mercado."""
        relatorio = "**RelatÃ³rio do Assistente IA**\n"

        # PrevisÃµes
        for moeda in CONFIG["moedas"]:
            previsao = self.prever_tendencia(moeda)
            relatorio += f"**PrevisÃ£o {moeda}**: {previsao:.2f} USDT (prÃ³xima hora)\n"

        # NotÃ­cias
        relatorio += "\nğŸ“° **AnÃ¡lise de NotÃ­cias**\n"
        for noticia in self.analisar_noticias():
            relatorio += f"- {noticia['titulo']} ({noticia['sentimento']} {noticia['score']:.2f})\n"

        # Memecoins
        relatorio += "\nğŸš€ **Memecoins em Alta**\n"
        for coin in self.detectar_memecoins():
            relatorio += f"- {coin['nome']} ({coin['alta_24h']:.2f}%)\n"

        # RecomendaÃ§Ãµes
        relatorio += "\nğŸ’¡ **RecomendaÃ§Ãµes**\n"
        relatorio += "- Diversifique entre BTC e SOL\n"
        relatorio += "- Considere realizar lucros acima de 5%\n"

        relatorio += "\nğŸ’¡ **SugestÃµes de Mercado**\n"
        relatorio += gerar_sugestoes()

        return relatorio

def gerar_mensagem_personalizada(evento: str) -> str:
    """Gera uma mensagem personalizada com base no evento."""
    mensagens = {
        "mercado_em_alta": "ğŸš€ O mercado estÃ¡ em alta! Considere aproveitar as oportunidades.",
        "mercado_em_baixa": "ğŸ“‰ O mercado estÃ¡ em baixa. Talvez seja um bom momento para avaliar suas posiÃ§Ãµes.",
        "noticia_importante": "ğŸ“° Uma notÃ­cia importante foi detectada! Confira os detalhes no relatÃ³rio.",
    }
    return mensagens.get(evento, "ğŸ¤– Estou aqui para ajudar! O que vocÃª precisa?")

def gerar_sugestoes() -> str:
    """Gera sugestÃµes com base nos dados de mercado."""
    sugestoes = []
    for moeda in CONFIG["moedas"]:
        previsao = assistente.prever_tendencia(moeda)
        if previsao > 1.05:  # Exemplo: se a previsÃ£o for 5% maior que o preÃ§o atual
            sugestoes.append(f"Considere comprar {moeda}, previsÃ£o de alta.")
        elif previsao < 0.95:  # Exemplo: se a previsÃ£o for 5% menor que o preÃ§o atual
            sugestoes.append(f"Considere vender {moeda}, previsÃ£o de baixa.")
    return "\n".join(sugestoes) if sugestoes else "Nenhuma sugestÃ£o no momento."

def responder_pergunta(pergunta: str) -> str:
    """Responde a perguntas comuns."""
    if "previsÃ£o" in pergunta.lower():
        moeda = pergunta.split()[-1].upper()  # Exemplo: "Qual Ã© a previsÃ£o para BTC?"
        # Converte para o formato completo (ex.: BTC -> BTCUSDT)
        moeda_completa = f"{moeda}USDT"
        if moeda_completa in CONFIG["moedas"]:
            previsao = assistente.prever_tendencia(moeda_completa)
            return f"A previsÃ£o para {moeda} Ã© {previsao:.2f} USDT na prÃ³xima hora."
        else:
            return f"Desculpe, nÃ£o reconheÃ§o a moeda {moeda}."
    elif "tendÃªncias" in pergunta.lower():
        return "As tendÃªncias do mercado estÃ£o no relatÃ³rio mais recente."
    else:
        return "Desculpe, nÃ£o entendi sua pergunta. Tente novamente."

def monitorar_mercado():
    """Monitora o mercado e envia alertas."""
    for moeda in CONFIG["moedas"]:
        df = assistente.coletar_dados_binance(moeda)
        variacao = (df['close'].iloc[-1] - df['close'].iloc[-2]) / df['close'].iloc[-2]
        if variacao > 0.05:  # Exemplo: alta maior que 5%
            asyncio.run(assistente.enviar_alerta_discord(f"ğŸš€ {moeda} subiu mais de 5% nas Ãºltimas horas!"))
        elif variacao < -0.05:  # Exemplo: queda maior que 5%
            asyncio.run(assistente.enviar_alerta_discord(f"ğŸ“‰ {moeda} caiu mais de 5% nas Ãºltimas horas!"))

import time

# Uso Exemplo
if __name__ == "__main__":
    assistente = IA_Assistente()
    evento = "mercado_em_alta"  # Exemplo de evento
    mensagem = gerar_mensagem_personalizada(evento)
    asyncio.run(assistente.enviar_alerta_discord(mensagem))
    while True:
        try:
            logging.info("Iniciando geraÃ§Ã£o do relatÃ³rio...")
            relatorio = assistente.gerar_relatorio()
            logging.info("RelatÃ³rio gerado com sucesso.")

            # Envia o relatÃ³rio para o Discord
            import asyncio
            asyncio.run(assistente.enviar_alerta_discord(relatorio))

        except Exception as e:
            logging.error(f"Erro no mÃ³dulo IA: {e}")

        # Aguarda 1 hora antes de gerar o prÃ³ximo relatÃ³rio
        time.sleep(3600)  # 3600 segundos = 1 hora