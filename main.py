import os
import sys
import subprocess
import time
import logging
import traceback
import signal
import psutil
import discord
import asyncio

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
DISCORD_CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID", "0"))

async def enviar_notificacao_discord(mensagem):
    """Envia notifica√ß√µes para o Discord."""
    try:
        client = discord.Client(intents=discord.Intents.default())
        await client.login(DISCORD_TOKEN)
        canal = await client.fetch_channel(DISCORD_CHANNEL_ID)
        await canal.send(mensagem)
        await client.close()
    except Exception as e:
        logging.error(f"Erro ao enviar notifica√ß√£o para o Discord: {e}")

# Obt√©m o diret√≥rio base do projeto
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Configura√ß√£o de logging
logs_dir = os.path.join(BASE_DIR, "logs")
os.makedirs(logs_dir, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(logs_dir, "main.log"), encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# Defini√ß√£o da vari√°vel USE_EMOJI antes de ser usada
USE_EMOJI = True

# Verifica se est√° rodando no Windows e configura a codifica√ß√£o
if sys.platform.startswith('win'):
    # Tenta configurar a codifica√ß√£o do console para UTF-8
    try:
        import ctypes
        kernel32 = ctypes.windll.kernel32
        kernel32.SetConsoleCP(65001)
        kernel32.SetConsoleOutputCP(65001)
    except:
        # Se falhar, remove emojis e caracteres especiais
        USE_EMOJI = False

# Fun√ß√£o para substituir emojis por texto
def emoji(emoji_text, alt_text):
    if USE_EMOJI:
        return emoji_text
    else:
        return alt_text

# Configura√ß√µes
CONFIG = {
    "modulos": {
        "trading": {
            "script": os.path.join(BASE_DIR, "modules", "bot_trading.py"),
            "processo": None,
            "pid": None,
            "ativo": False,
            "tentativas": 0,
            "max_tentativas": 5,
            "intervalo_reinicio": 10  # segundos
        },
        "discord": {
            "script": os.path.join(BASE_DIR, "modules", "bot_discord.py"),
            "processo": None,
            "pid": None,
            "ativo": False,
            "tentativas": 0,
            "max_tentativas": 5,
            "intervalo_reinicio": 10  # segundos
        },
        "tendencias": {
            "script": os.path.join(BASE_DIR, "modules", "bot_tendencias.py"),
            "processo": None,
            "pid": None,
            "ativo": False,
            "tentativas": 0,
            "max_tentativas": 5,
            "intervalo_reinicio": 10  # segundos
        },
        "ia": {  # Adicionado o m√≥dulo IA
            "script": os.path.join(BASE_DIR, "modules", "bot_ia.py"),
            "processo": None,
            "pid": None,
            "ativo": False,
            "tentativas": 0,
            "max_tentativas": 5,
            "intervalo_reinicio": 10  # segundos
        }
    },
    "intervalo_verificacao": 5,  # segundos
    "pasta_graficos": os.path.join(BASE_DIR, "graficos"),
    "pasta_logs": logs_dir
}

# Cria pastas necess√°rias
os.makedirs(CONFIG["pasta_graficos"], exist_ok=True)
os.makedirs(CONFIG["pasta_logs"], exist_ok=True)

# Fun√ß√£o para iniciar um m√≥dulo
def iniciar_modulo(nome_modulo):
    modulo = CONFIG["modulos"][nome_modulo]
    
    if modulo["ativo"]:
        logging.warning(f"M√≥dulo {nome_modulo} j√° est√° ativo")
        return True
    
    logging.info(f"{emoji('üöÄ', '[INICIANDO]')} Iniciando m√≥dulo {nome_modulo}...")
    
    try:
        # Verifica se o script existe
        if not os.path.exists(modulo["script"]):
            logging.error(f"Script {modulo['script']} n√£o encontrado")
            return False
        
        # Redireciona sa√≠da para arquivos de log
        stdout_log = open(os.path.join(CONFIG["pasta_logs"], f"{nome_modulo}.stdout.log"), "w")
        stderr_log = open(os.path.join(CONFIG["pasta_logs"], f"{nome_modulo}.stderr.log"), "w")
        
        # Inicia o processo
        processo = subprocess.Popen(
            [sys.executable, modulo["script"]],
            stdout=stdout_log,
            stderr=stderr_log,
            cwd=BASE_DIR
        )

        # Atualiza informa√ß√µes do m√≥dulo
        modulo["processo"] = processo
        modulo["pid"] = processo.pid
        modulo["ativo"] = True
        modulo["tentativas"] = 0
        
        logging.info(f"{emoji('‚úÖ', '[OK]')} M√≥dulo {nome_modulo} iniciado com PID {processo.pid}")
        return True
    
    except Exception as e:
        logging.error(f"Erro ao iniciar m√≥dulo {nome_modulo}: {e}")
        logging.error(traceback.format_exc())
        modulo["ativo"] = False
        modulo["tentativas"] += 1
        return False

# Fun√ß√£o para verificar se um processo est√° ativo
def verificar_processo(pid):
    try:
        # Verifica se o processo existe
        processo = psutil.Process(pid)
        return processo.is_running()
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        return False
    except Exception as e:
        logging.error(f"Erro ao verificar processo {pid}: {e}")
        return False

# Fun√ß√£o para verificar o status de um m√≥dulo
def verificar_modulo(nome_modulo):
    modulo = CONFIG["modulos"][nome_modulo]
    
    # Se o m√≥dulo n√£o est√° marcado como ativo, n√£o h√° o que verificar
    if not modulo["ativo"]:
        return False
    
    # Verifica se o processo ainda est√° em execu√ß√£o
    if modulo["pid"] and verificar_processo(modulo["pid"]):
        return True
    
    # Verifica se o processo terminou
    if modulo["processo"]:
        retorno = modulo["processo"].poll()
        if retorno is not None:
            # Processo terminou
            stderr = modulo["processo"].stderr.read() if modulo["processo"].stderr else ""
            logging.warning(f"{emoji('‚ö†Ô∏è', '[AVISO]')} M√≥dulo {nome_modulo} encerrou com c√≥digo {retorno}")
            if stderr:
                logging.error(f"Erro do m√≥dulo {nome_modulo}:\n{stderr}")
            
            # Marca o m√≥dulo como inativo
            modulo["ativo"] = False
            modulo["pid"] = None
            modulo["processo"] = None
            return False
    
    # Se chegou aqui, o processo n√£o est√° mais em execu√ß√£o, mas n√£o foi detectado pelo poll()
    logging.warning(f"{emoji('‚ö†Ô∏è', '[AVISO]')} M√≥dulo {nome_modulo} n√£o est√° mais em execu√ß√£o")
    modulo["ativo"] = False
    modulo["pid"] = None
    modulo["processo"] = None
    return False

async def notificar_reinicio(nome_modulo):
    mensagem = f"‚ö†Ô∏è O m√≥dulo `{nome_modulo}` falhou e ser√° reiniciado."
    await enviar_notificacao_discord(mensagem)

def reiniciar_modulo(nome_modulo):
    modulo = CONFIG["modulos"][nome_modulo]
    
    # Verifica se j√° excedeu o n√∫mero m√°ximo de tentativas
    if modulo["tentativas"] >= modulo["max_tentativas"]:
        logging.error(f"{emoji('‚ùå', '[ERRO]')} N√∫mero m√°ximo de tentativas excedido para o m√≥dulo {nome_modulo}")
        return False
    
    logging.info(f"{emoji('üîÑ', '[REINICIANDO]')} Tentando reiniciar m√≥dulo {nome_modulo}...")
    asyncio.run(notificar_reinicio(nome_modulo))
    # Tenta encerrar o processo se ainda estiver ativo
    if modulo["pid"] and verificar_processo(modulo["pid"]):
        try:
            os.kill(modulo["pid"], signal.SIGTERM)
            time.sleep(2)  # D√° um tempo para o processo encerrar
        except Exception as e:
            logging.warning(f"Erro ao encerrar processo {modulo['pid']}: {e}")
    
    # Marca o m√≥dulo como inativo
    modulo["ativo"] = False
    modulo["pid"] = None
    modulo["processo"] = None
    
    # Aguarda o intervalo de rein√≠cio
    time.sleep(modulo["intervalo_reinicio"])
    
    # Inicia o m√≥dulo novamente
    return iniciar_modulo(nome_modulo)

# Fun√ß√£o para encerrar todos os m√≥dulos
def encerrar_modulos():
    for nome_modulo, modulo in CONFIG["modulos"].items():
        if modulo["ativo"] and modulo["pid"]:
            try:
                logging.info(f"{emoji('üõë', '[ENCERRANDO]')} Encerrando m√≥dulo {nome_modulo}...")
                os.kill(modulo["pid"], signal.SIGTERM)
            except Exception as e:
                logging.warning(f"Erro ao encerrar m√≥dulo {nome_modulo}: {e}")

# Fun√ß√£o principal
def main():
    logging.info(f"{emoji('üöÄ', '[INICIANDO]')} Iniciando sistema completo de trading de criptomoedas")
    
    # Inicia os m√≥dulos em sequ√™ncia
    iniciar_modulo("trading")
    time.sleep(5)  # Aguarda um pouco para o m√≥dulo de trading inicializar
    
    iniciar_modulo("discord")
    time.sleep(3)  # Aguarda um pouco para o m√≥dulo de discord inicializar
    
    iniciar_modulo("tendencias")
    
    # Loop principal
    try:
        while True:
            # Verifica o status de cada m√≥dulo
            for nome_modulo in CONFIG["modulos"]:
                if not verificar_modulo(nome_modulo):
                    # Se o m√≥dulo n√£o est√° ativo, tenta reinici√°-lo
                    reiniciar_modulo(nome_modulo)
            
            # Aguarda o pr√≥ximo ciclo de verifica√ß√£o
            time.sleep(CONFIG["intervalo_verificacao"])
    
    except KeyboardInterrupt:
        logging.info(f"{emoji('üëã', '[ENCERRADO]')} Sistema encerrado pelo usu√°rio")
    except Exception as e:
        logging.error(f"{emoji('‚ùå', '[ERRO FATAL]')} Erro fatal: {e}")
        logging.error(traceback.format_exc())
    finally:
        logging.info("Encerrando todos os m√≥dulos...")
        encerrar_modulos()

if __name__ == "__main__":
    main()
